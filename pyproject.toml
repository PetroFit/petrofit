# [build-system]

# requires = ["setuptools>=72",
#             "setuptools_scm",
#             "wheel"]

# build-backend = 'setuptools.build_meta'


################################################################################
# Build Configuration
################################################################################

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

################################################################################
# Project Configuration
################################################################################

[project]
name = "petrofit"

dynamic = ["version"]

description = "Python package for calculating Petrosian properties and fitting galaxy light profiles."
authors = [
    { name = "The PetroFit Team", email = "" },
]
license = "BSD-3-Clause"
readme = {"file" = "README.md", "content-type" = "text/markdown"}
requires-python = ">=3.12"
# Please consult https://pypi.org/classifiers/ for a full list.
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]

keywords = ["fitting", "galaxy", "light", "profile", "petrosian", "photometry"]
dependencies = [
    "Cython",
    "numpy",
    "matplotlib",
    "astropy",
    "scipy",
    "pyyaml",
    "scikit-learn",
    "scikit-image",
    "photutils",
]

[project.urls]
Homepage = "https://github.com/PetroFit/petrofit"
"Source Code" = "https://github.com/PetroFit/petrofit"
"Bug Tracker" = "https://github.com/PetroFit/petrofit/issues"
Documentation = "https://petrofit.readthedocs.io"
Download = "https://pypi.org/project/petrofit/#files"

[project.optional-dependencies]
dev = [
    "hatch",
]

################################################################################
# Tool Configuration
################################################################################

[tool.hatch.build]
only-packages = true

[tool.hatch.build.targets.wheel]
packages = ["src/petrofit"]
[tool.hatch.build.hooks.vcs]
version-file = "src/petrofit/_version.py"

[tool.hatch.version]
source = "vcs"
[tool.pytest.ini_options]
testpaths = ["petrofit"]
markers = ["raises"]
astropy_header = true
doctest_plus = "enabled"
text_file_format = "rst"
addopts = "--doctest-rst"

[tool.coverage.paths]
source = [
    "src/petrofit",
    "*/site-packages/petrofit",
]

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "src/petrofit/_version.py",
]

[tool.coverage.report]
exclude_lines = ["pragma: no cover"]
precision = 2
[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D107",  # 'Missing docstring in __init__' ignored because pydoclint wants us to document the class instead.
    "D203",  # '1 blank line required before class docstring' ignored because we want no blank line.
    "D212",  # 'Multi-line docstring summary should start at the first line' ignored because we want the summary to start on the second line.
    "D407",  # 'Missing dashed underline after section' ignored because Google style docstrings don't underline.
    "ANN002",  # 'Missing type annotation for {*args} in method'.
    "ANN003",  # 'Missing type annotation for {*kwargs} in method'.
    "ANN101",  # 'Missing type annotation for {self} in method'.
    "ANN102",  # 'Missing type annotation for {cls} in classmethod'.
]
exclude = [
    "src/petrofit/_version.py",
    "docs/conf.py",
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
    "E401",  # 'Multiple imports on one line'
    "E402",  # 'Module level import not at top of file'
    "F401",  # 'Imported but unused'
    "I001",  # 'Import block is un-sorted or un-formatted' ignored because we may have to import in a particular, not-alphabetical order.
]
"tests/**/*.py" = [
    "S101",  # 'Use of assert detected' ignored because we are using pytest.
    "INP001",  # 'Insecure input' ignored because we are testing.
    "ANN201",  # 'Missing type annotation for {return}' ignored because all tests return `None`.
]

[tool.ruff.lint.isort]
case-sensitive = true
known-first-party = ["src", "petrofit"]
lines-after-imports = 1

[tool.pydoclint]
style = "numpy"
arg-type-hints-in-docstring = false
check-return-types = false
check-yield-types = false
exclude = "_version.py"
# TODO: Adjust mypy configuration.
#[tool.mypy]
#plugins = [
#    "pydantic.mypy",
#]

# Stop mypy from complaining about missing types from imports.
#[[tool.mypy.overrides]]
#module = [
#    "pandas",
#]
#ignore_missing_imports = true

#[tool.pydantic-mypy]
#init_forbid_extra = true
#init_typed = true
#warn_required_dynamic_aliases = true
################################################################################
# Hatch Environments
################################################################################
[tool.hatch.envs.style]
description = """Check the style of the codebase."""
dependencies = [
    "pydoclint",
    "ruff",
]
detached = true

[tool.hatch.envs.style.scripts]
docstrings = "pydoclint"
code = "ruff check {args}"
format = "ruff format {args}"
check = ["docstrings", "code"]

[tool.hatch.envs.audit]
description = """Check dependencies for security vulnerabilities."""
extra-dependencies = [
    "pip-audit",
]

[tool.hatch.envs.audit.scripts]
check = ["pip-audit"]
[tool.hatch.envs.types]
description = """Check the static types of the codebase."""
dependencies = [
    "mypy",
]

[tool.hatch.envs.types.scripts]
check = "mypy src/petrofit"
[tool.hatch.envs.docs]
description = """Build or serve the documentation."""
dependencies = [
    "pydata_sphinx_theme ~=0.16",
    "myst-parser ~=4.0",
    "Sphinx ~=8.0",
    "sphinx-autobuild ==2024.10.3",
    "sphinx-astropy",
    "ipykernel",
    "nbsphinx",
    "sphinx_rtd_theme",
    "ipywidgets",
]

[tool.hatch.envs.docs.scripts]
build = ["sphinx-apidoc -o docs/api petrofit", "sphinx-build {args:-W -b html docs docs/_build}"]
serve = ["sphinx-apidoc -o docs/api petrofit", "sphinx-autobuild docs --watch src/petrofit {args:-b html docs/_build/serve}"]

[tool.hatch.envs.install]
description = """Test the installation the package."""
dependencies = [
    "pip",
    "twine",
]
detached = true

[tool.hatch.envs.install.scripts]
check = [
    "pip check",
    "hatch build {args:--clean}",
    "twine check dist/*",
]
[tool.hatch.envs.test]
description = """Run the test suite."""
extra-dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-raises",
    "pytest-randomly",
    "pytest-xdist",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.12", "3.13"]

[tool.hatch.envs.test.scripts]
run = "pytest {args:--cov=petrofit --cov-report=term-missing}"
